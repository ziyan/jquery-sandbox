// Generated by CoffeeScript 1.4.0
(function() {

  (function($) {
    'use strict';

    var Sandbox, alphanumeric, generate_id, handler, load_frame, post, post_to_frame, post_to_queue, unload_frame;
    alphanumeric = 'abcdefghijklmnopqrstuvwxyz';
    alphanumeric += alphanumeric.toUpperCase();
    alphanumeric += '0123456789';
    generate_id = function() {
      var i, id, _i;
      id = '';
      for (i = _i = 1; _i <= 16; i = ++_i) {
        id += alphanumeric[Math.floor(alphanumeric.length * Math.random())];
      }
      return id;
    };
    post_to_queue = function(message) {
      return $.sandbox.queue.push(message);
    };
    post_to_frame = function(message) {
      return $.sandbox.frame.get(0).contentWindow.postMessage(message, '*');
    };
    post = post_to_queue;
    handler = function(e) {
      var data;
      data = JSON.parse(e.originalEvent.data);
      if (data.id in $.sandbox.sandboxes) {
        return $.sandbox.sandboxes[data.id].callback(data.data, data.error);
      }
    };
    load_frame = function(url) {
      if ($.sandbox.frame) {
        return;
      }
      $.sandbox.frame = $('<iframe />').attr('src', url).appendTo('body').css({
        position: 'absolute',
        top: -9999,
        left: -9999,
        width: 100,
        height: 100
      });
      return $.sandbox.frame.bind('load', function() {
        var message, queue, _i, _len, _results;
        $(window).bind('message', handler);
        post = post_to_frame;
        queue = $.sandbox.queue;
        $.sandbox.queue = [];
        _results = [];
        for (_i = 0, _len = queue.length; _i < _len; _i++) {
          message = queue[_i];
          _results.push(post(message));
        }
        return _results;
      });
    };
    unload_frame = function() {
      if (!$.sandbox.frame) {
        return;
      }
      if ($.sandbox.count > 0) {
        return;
      }
      $(window).unbind('message', handler);
      post = post_to_queue;
      $.sandbox.frame.unbind().remove();
      return $.sandbox.frame = null;
    };
    Sandbox = function(options) {
      this.options = $.extend(true, {}, $.sandbox.defaults, options || {});
      this.id = generate_id();
      this.state = 'init';
      return this;
    };
    Sandbox.prototype = {
      constructor: Sandbox,
      callback: function(data, error) {
        return this.options.callback.apply(this, [data, error]);
      },
      post: function(command, options) {
        return post(JSON.stringify({
          id: this.id,
          command: command,
          options: options
        }));
      },
      run: function() {
        if (this.state !== 'init') {
          return;
        }
        load_frame(this.options.url);
        this.post('run', {
          scripts: this.options.scripts,
          timeout: this.options.timeout
        });
        return this.state = 'running';
      },
      terminate: function() {
        if (this.state !== 'running') {
          return;
        }
        this.post('terminate');
        this.state = 'terminated';
        delete $.sandbox.sandboxes[this.id];
        return $.sandbox.count--;
      }
    };
    $.sandbox = function(options) {
      var sandbox;
      if (!$.support.sandbox) {
        return null;
      }
      sandbox = new Sandbox(options);
      $.sandbox.sandboxes[sandbox.id] = sandbox;
      $.sandbox.count++;
      sandbox.run();
      return sandbox;
    };
    $.sandbox.defaults = {
      timeout: 0,
      url: '//ziyan.github.io/jquery-sandbox/0.0.1/sandbox.html',
      scripts: [],
      callback: function(data, error) {
        return true;
      }
    };
    $.sandbox.sandboxes = {};
    $.sandbox.count = 0;
    $.sandbox.frame = null;
    $.sandbox.queue = [];
    return $.support.sandbox = typeof Worker !== void 0;
  })(window.jQuery);

}).call(this);
